Index: src/com/company/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.company;\r\n\r\nimport javax.swing.table.DefaultTableModel;\r\nimport java.sql.*;\r\n\r\npublic class Database {\r\n\r\n    //checking the credentials by username and password\r\n    public boolean checkCredentials(Statement statement, String username, String password) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM User;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n\r\n        while (rs.next()) {\r\n\r\n            String user = rs.getString(\"UserName\");\r\n            String pass = rs.getString(\"Password\");\r\n\r\n            if (username.equals(user) && password.equals(pass))\r\n                return true;\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    //getting the role of a user by username and password\r\n    public String getRole(Statement statement, String username, String password) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM User;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n\r\n        while (rs.next()) {\r\n\r\n            String user = rs.getString(\"UserName\");\r\n            String pass = rs.getString(\"Password\");\r\n            String role = rs.getString(\"Role\");\r\n\r\n            if (username.equals(user) && password.equals(pass))\r\n                return role;\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n\r\n    //getting the info for all of the users\r\n    public String[][] getInfoUser(Statement statement) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM User;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n        rs.last();\r\n        String[][] data = new String[rs.getRow()][];\r\n        int i = 0;\r\n        //int j = 0;\r\n\r\n        rs.beforeFirst();\r\n        while (rs.next()) {\r\n\r\n            String id = rs.getString(\"UserID\");\r\n            String user = rs.getString(\"Username\");\r\n            String pass = rs.getString(\"Password\");\r\n            String title = rs.getString(\"Title\");\r\n            String forename = rs.getString(\"Forename\");\r\n            String surname = rs.getString(\"Surname\");\r\n            String email = rs.getString(\"Email\");\r\n            String role = rs.getString(\"Role\");\r\n\r\n            data[i] = new String[]{id, user, pass, title, forename, surname, email, role};\r\n            i++;\r\n        }\r\n\r\n        return data;\r\n\r\n    }\r\n\r\n    //getting the info for all of the departments\r\n    public String[][] getInfoDepartment(Statement statement) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM Department;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n        rs.last();\r\n        String[][] data = new String[rs.getRow()][];\r\n        int i = 0;\r\n\r\n        rs.beforeFirst();\r\n        while (rs.next()) {\r\n\r\n            String id = rs.getString(\"DepartmentID\");\r\n            String depCode = rs.getString(\"DepartmentCode\");\r\n            String depName = rs.getString(\"DepartmentName\");\r\n\r\n            data[i] = new String[]{id, depCode, depName};\r\n            i++;\r\n        }\r\n\r\n        return data;\r\n\r\n    }\r\n\r\n    //getting the info for all of the modules\r\n    public String[][] getInfoModule(Connection connection, Statement statement) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM Module;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n        rs.last();\r\n        String[][] data = new String[rs.getRow()][];\r\n        int i = 0;\r\n\r\n        rs.beforeFirst();\r\n        while (rs.next()) {\r\n\r\n            String id = rs.getString(\"ModuleID\");\r\n            String moduleCode = rs.getString(\"ModuleCode\");\r\n            String moduleName = rs.getString(\"ModuleName\");\r\n            String level = rs.getString(\"Level\");\r\n            String core = rs.getString(\"Core\");\r\n            String credit = rs.getString(\"Credit\");\r\n            String degreeID = rs.getString(\"DegreeID\");\r\n\r\n            if (!degreeID.equals(\"0\")) {\r\n\r\n\r\n                Statement statement2 = connection.createStatement();\r\n                String degreeName = getDegreeName(statement2, degreeID);\r\n\r\n                data[i] = new String[]{id, moduleCode, moduleName, level, core, credit, degreeName};\r\n                i++;\r\n\r\n                if (statement2 != null) {\r\n                    statement2.close();\r\n                }\r\n\r\n            } else {\r\n                data[i] = new String[]{id, moduleCode, moduleName, level, core, credit, \"-\"};\r\n                i++;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return data;\r\n\r\n    }\r\n\r\n    public String getDegreeName(Statement statement, String degreeID) throws SQLException {\r\n\r\n        String sql2 = \"SELECT * FROM Degree WHERE DegreeID = \" + degreeID;\r\n        ResultSet rs = statement.executeQuery(sql2);\r\n\r\n        while (rs.next()) {\r\n            String degreeName = rs.getString(\"DegreeName\");\r\n            String degreeID2 = rs.getString(\"DegreeID\");\r\n\r\n            if (degreeID2.equals(degreeID)) {\r\n                System.out.println(degreeName);\r\n                return degreeName;\r\n            }\r\n\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    //updating the user with the new info\r\n    public void updateUser(Connection connection, String username, String password, String title,\r\n                           String forename, String surname, String email, String role, String id) throws SQLException {\r\n\r\n        String sql = \"UPDATE User SET Username = ?, \" +\r\n                \"Password = ?, \" +\r\n                \"Title = ?, \" +\r\n                \"Forename = ?, \" +\r\n                \"Surname = ?, \" +\r\n                \"Email = ?, \" +\r\n                \"Role = ? \" + \"WHERE UserID = ?\";\r\n\r\n        PreparedStatement pstmt = connection.prepareStatement(sql);\r\n\r\n        // set the corresponding param\r\n        pstmt.setString(1, username);\r\n        pstmt.setString(2, password);\r\n        pstmt.setString(3, title);\r\n        pstmt.setString(4, forename);\r\n        pstmt.setString(5, surname);\r\n        pstmt.setString(6, email);\r\n        pstmt.setString(7, role);\r\n        pstmt.setString(8, id);\r\n\r\n        // update\r\n        pstmt.executeUpdate();\r\n\r\n    }\r\n\r\n    //updating the department with the new info\r\n    public void updateDepartment(Connection connection, String depCode, String depName, String id) {\r\n\r\n        try {\r\n            String sql = \"UPDATE Department SET DepartmentCode = ?, \" +\r\n                    \"DepartmentName = ? \" + \"WHERE DepartmentID = \" + id;\r\n\r\n            PreparedStatement pstmt = connection.prepareStatement(sql);\r\n\r\n            // set the corresponding param\r\n            pstmt.setString(1, depCode);\r\n            pstmt.setString(2, depName);\r\n            //pstmt.setString(3, id);\r\n\r\n            // update\r\n            pstmt.executeUpdate();\r\n        } catch (SQLException e) {\r\n            System.out.println(e);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public String[][] getStudentInfo(Statement statement) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM Grading;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n        rs.last();\r\n        String[][] data = new String[rs.getRow()][];\r\n        int i = 0;\r\n\r\n        rs.beforeFirst();\r\n        while (rs.next()) {\r\n\r\n            String gradingID = rs.getString(\"GradingID\");\r\n            String moduleCode = rs.getString(\"ModuleCode\");\r\n            String username = rs.getString(\"Username\");\r\n            String teacher = rs.getString(\"Teacher\");\r\n            String grade = rs.getString(\"Grade\");\r\n            String regNo = rs.getString(\"RegNo\");\r\n            String pass = String.valueOf(rs.getInt(\"pass\"));\r\n            String moduleID = rs.getString(\"ModuleID\");\r\n\r\n            data[i] = new String[]{gradingID, moduleCode, username, teacher, grade,\r\n                    regNo, pass, moduleID};\r\n            i++;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n\r\n    public void UpdateStudent(Connection connection, double grade,\r\n                              boolean pass, String regNo) throws SQLException {\r\n\r\n        String sql = \"UPDATE Grading SET grade = ?, \" +\r\n                \"pass = ? \" +\r\n                \"WHERE RegNo = ?\";\r\n\r\n        PreparedStatement pstmt = connection.prepareStatement(sql);\r\n\r\n        // set the corresponding param\r\n        pstmt.setDouble(1, grade);\r\n\r\n        if (grade >= 70) {\r\n            pstmt.setBoolean(2, true);\r\n        } else {\r\n            pstmt.setBoolean(2, false);\r\n        }\r\n        pstmt.setString(3, regNo);\r\n\r\n        // update\r\n        pstmt.executeUpdate();\r\n\r\n    }\r\n\r\n\r\n    public double CalculateGrade(Statement statement, String regNo,\r\n                                    String moduleCode) throws SQLException {\r\n\r\n        String sql = (\"SELECT grade FROM Grading WHERE (RegNo = \" + regNo +\r\n                \") AND (ModuleCode = \" + moduleCode + \");\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n        rs.last();\r\n        double[] data = new double[rs.getRow()];\r\n        int i = 0;\r\n\r\n        rs.beforeFirst();\r\n        while (rs.next()) {\r\n\r\n            double grade = rs.getDouble(\"Grade\");\r\n\r\n            data[i] = grade;\r\n            i++;\r\n        }\r\n\r\n        double sum = 0;\r\n        int numberOfGrades = 0;\r\n        for (i=0; i<data.length; i++) {\r\n            sum = sum + data[i];\r\n            numberOfGrades++;\r\n        }\r\n\r\n        return sum/numberOfGrades;\r\n    }\r\n\r\n    //getting the user id\r\n    public String getUserID(Statement statement, String username, String password) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM User;\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n\r\n        while(rs.next()) {\r\n\r\n            String userID = rs.getString(\"UserID\");\r\n            String user = rs.getString(\"UserName\");\r\n            String pass = rs.getString(\"Password\");\r\n\r\n            if(username.equals(user) && password.equals(pass))\r\n                return userID;\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    //getting the department id\r\n    public String getDepartmentID(Statement statement, String depCode, String depName){\r\n\r\n        String sql = (\"SELECT * FROM Department;\");\r\n\r\n        try {\r\n\r\n            ResultSet rs = statement.executeQuery(sql);\r\n\r\n            while(rs.next()) {\r\n\r\n                String depID = rs.getString(\"DepartmentID\");\r\n                String departmentCode = rs.getString(\"DepartmentCode\");\r\n                String departmentName = rs.getString(\"DepartmentName\");\r\n\r\n                if(depCode.equals(departmentCode) && depName.equals(departmentName))\r\n                    return depID;\r\n\r\n            }\r\n\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    //adding a user to the database\r\n    public void addUser(Connection connection, String username, String password, String title, String forename,\r\n                        String surname, String email, String role) throws SQLException {\r\n\r\n        // the mysql insert statement\r\n        String query = \" insert into User (Username, Password, Title, Forename, Surname, Email, Role)\"\r\n                + \" values (?, ?, ?, ?, ?, ?, ?)\";\r\n\r\n        // create the mysql insert preparedstatement\r\n        PreparedStatement preparedStmt = connection.prepareStatement(query);\r\n        preparedStmt.setString(1, username);\r\n        preparedStmt.setString(2, password);\r\n        preparedStmt.setString(3, title);\r\n        preparedStmt.setString(4, forename);\r\n        preparedStmt.setString(5, surname);\r\n        preparedStmt.setString(6, email);\r\n        preparedStmt.setString(7, role);\r\n\r\n        // execute the preparedstatement\r\n        preparedStmt.execute();\r\n\r\n    }\r\n\r\n    //adding a department to the databse\r\n    public void addDepartment(Connection connection, String depCode, String depName) {\r\n\r\n        // the mysql insert statement\r\n        String query = \" insert into Department (DepartmentCode, DepartmentName)\"\r\n                + \" values (?, ?)\";\r\n\r\n        try {\r\n            // create the mysql insert preparedstatement\r\n            PreparedStatement preparedStmt = connection.prepareStatement(query);\r\n            preparedStmt.setString(1, depCode);\r\n            preparedStmt.setString(2, depName);\r\n\r\n            // execute the preparedstatement\r\n            preparedStmt.execute();\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    //deleting a user by its ID\r\n    public void deleteUser(Connection connection, String userID){\r\n        String sql = \"DELETE FROM User WHERE UserID = ?\";\r\n\r\n        try {\r\n            PreparedStatement pstmt = connection.prepareStatement(sql);\r\n\r\n            // set the corresponding param\r\n            pstmt.setInt(1, Integer.parseInt(userID));\r\n            // execute the delete statement\r\n            pstmt.executeUpdate();\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    //deleting a department by its ID\r\n    public void deleteDepartment(Connection connection, String depID){\r\n        String sql = \"DELETE FROM Department WHERE DepartmentID = ?\";\r\n\r\n        try {\r\n            PreparedStatement pstmt = connection.prepareStatement(sql);\r\n\r\n            // set the corresponding param\r\n            pstmt.setInt(1, Integer.parseInt(depID));\r\n            // execute the delete statement\r\n            pstmt.executeUpdate();\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    //REGISTRAR\r\n    //geting user table with only students\r\n    public String[][] getStudentUser(Statement statement) throws SQLException {\r\n\r\n        String sql = (\"SELECT * FROM User WHERE Role = 'Student';\");\r\n        ResultSet rs = statement.executeQuery(sql);\r\n        rs.last();\r\n        String[][] data = new String[rs.getRow()][];\r\n        int i = 0;\r\n        //int j = 0;\r\n\r\n        rs.beforeFirst();\r\n        while(rs.next()) {\r\n\r\n            String id = rs.getString(\"UserID\");\r\n            String user = rs.getString(\"Username\");\r\n            String pass = rs.getString(\"Password\");\r\n            String title = rs.getString(\"Title\");\r\n            String forename = rs.getString(\"Forename\");\r\n            String surname = rs.getString(\"Surname\");\r\n            String email = rs.getString(\"Email\");\r\n            String role = rs.getString(\"Role\");\r\n\r\n            data[i] = new String[]{id, user, pass, title, forename, surname, email,role};\r\n            i++;\r\n        }\r\n\r\n        return data;\r\n\r\n    }\r\n\r\n    public void addStudent(Connection connection, String username, String password, String title, String forename,\r\n                           String surname, String email, String role) throws SQLException {\r\n\r\n        // the mysql insert statement\r\n        String query = \" insert into User (Username, Password, Title, Forename, Surname, Email, Role)\"\r\n                + \" values (?, ?, ?, ?, ?, ?,'Student')\";\r\n\r\n        // create the mysql insert preparedstatement\r\n        PreparedStatement preparedStmt = connection.prepareStatement(query);\r\n        preparedStmt.setString(1, username);\r\n        preparedStmt.setString(2, password);\r\n        preparedStmt.setString(3, title);\r\n        preparedStmt.setString(4, forename);\r\n        preparedStmt.setString(5, surname);\r\n        preparedStmt.setString(6, email);\r\n        //preparedStmt.setString(7, role);\r\n\r\n        // execute the preparedstatement\r\n        preparedStmt.execute();\r\n\r\n    }\r\n\r\n\r\n    //closing the connection to the database\r\n    public void close(Statement statement, Connection connection) {\r\n        try {\r\n            if (statement != null) {\r\n                statement.close();\r\n            }\r\n\r\n            if (connection != null) {\r\n                connection.close();\r\n            }\r\n        } catch (SQLException se) {\r\n            se.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/company/Database.java	(revision 86c38081e9226c11c893cfb1564694f90e1eebcc)
+++ src/com/company/Database.java	(date 1607027350986)
@@ -274,8 +274,7 @@
     public double CalculateGrade(Statement statement, String regNo,
                                     String moduleCode) throws SQLException {
 
-        String sql = ("SELECT grade FROM Grading WHERE (RegNo = " + regNo +
-                ") AND (ModuleCode = " + moduleCode + ");");
+        String sql = ("SELECT * FROM Grading;");
         ResultSet rs = statement.executeQuery(sql);
         rs.last();
         double[] data = new double[rs.getRow()];
@@ -284,16 +283,21 @@
         rs.beforeFirst();
         while (rs.next()) {
 
-            double grade = rs.getDouble("Grade");
+            String registNo = rs.getString("RegNo");
+            String modCode = rs.getString("moduleCode");
+            double grade = rs.getDouble("grade");
 
-            data[i] = grade;
+
+            if (registNo == regNo && modCode == moduleCode)
+                data[i] = grade;
             i++;
         }
 
         double sum = 0;
         int numberOfGrades = 0;
-        for (i=0; i<data.length; i++) {
-            sum = sum + data[i];
+        for (int j=0; j<data.length; j++) {
+
+            sum = sum + data[j];
             numberOfGrades++;
         }
 
